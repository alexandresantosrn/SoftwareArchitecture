Model SysADLModel ; package SmartPlaceDUD { dimension Temperatura unit Celsius { dimension = Temperatura } } Requirement ExibirInterfaceWebRF ( 2 ) { text = "O sistema deve apresentar junto a uma interface web, os status dos ar-condicionados, bem como a presença de pessoas no ambiente." } Requirement MonitorarArCondicionadosRF ( 2.1 ) { text = "O sistema deve monitorar a situação dos dispositivos de ar-condicionado no ambiente, por meio dos sensores de temperatura, e retornar essa informação para a interface web." derive ExibirInterfaceWebRF ; } Requirement MonitorarPresencaRF ( 2.2 ) { text = "O sistema deve monitorar a presença e o quantitativo de pessoas na sala, através das câmeras de monitoramento e retornar essa informação para a interface web." derive ExibirInterfaceWebRF ; } Requirement ControlarAmbienteRF ( 1 ) { text = "O sistema deve permitir o controle da temperatura e luminosidade da sala, por meio de uso de sensores, possibilitando o desligamento e acionamento dos dispositivos." } Requirement VerificarPresencaRF ( 1.1 ) { text = "O sistema deve monitorar a presença de pessoas no ambiente, através do uso de sensores de presença e acionar o funcionamento e desligamento das lâmpadas e ar-condicionados do ambiente." derive ControlarAmbienteRF ; } Requirement ControlarLampadasRF ( 1.1.1 ) { text = "O sistema deve acionar o funcionamento das lâmpadas quando existirem pessoas presentes no ambiente, e acionar o seu desligamento quando não existirem pessoas presentes." derive VerificarPresencaRF ; } Requirement AumentarTemperaturaRF ( 3.1 ) { text = " sistema deve permitir o aumento da temperatura dos dispositivos de ar-condicionado, conforme acionamento por meio do leitor." derive DefinirTemperaturaRF ; } Requirement DiminuirTemperaturaRF ( 3.2 ) { text = "O sistema deve permitir a diminuição da temperatura dos dispositivos de ar-condicionado, conforme acionamento por meio do leitor." derive DefinirTemperaturaRF ; } Requirement QualidadeRNF ( 4 ) { text = "O sistema deve satisfazer preocupações com modificabilidade, escalabilidade, disponibilidade e acurácia." } Requirement ModificabilidadeRNF ( 4.1 ) { text = "O sistema deve reduzir os custos de modificações ao longo do seu ciclo de vida." derive QualidadeRNF ; } Requirement EscalabilidadeRNF ( 4.2 ) { text = "O sistema deve ter a capacidade de expandir seu campo de operação para vários ambientes." derive QualidadeRNF ; } Requirement DisponibilidadeRNF ( 4.3 ) { text = "O sistema deve estar sempre disponível, minimizando a ocorrência de interrupções." derive QualidadeRNF ; } Requirement AcuraciaRNF ( 4.4 ) { text = "O sistema deve utilizar equipamentos (câmeras e sensores) adequados para a especificidade de cada ambiente." derive QualidadeRNF ; }Requirement DefinirTemperaturaRF ( 3 ) { text = "O sistema deve permitir que os usuários definam a temperatura dos dispositivos de ar-condicionado através de um leitor de temperatura, presente na entrada da sala." Requirement ControlarArCondicionadosRF ( 1.1.2 ) { text = "O sistema deve acionar o funcionamento dos dispositivos de ar-condicionado, com o valor de temperatura estabelecido no leitor, quando existirem pessoas presentes no ambiente, e acionar o seu desligamento quando não existirem pessoas presentes." derive VerificarPresencaRF ;  } } package SmartPlaceVLD { value type Int { } value type Void { } value type Boolean { } value type String { } value type Real { } enum ComandosLuz { ligar , desligar } enum ComandosArCondicionado { ligar , desligar , aumentarResfriador , diminuirResfriador } value type TemperaturaCelsius { unit = SmartPlaceDUD.Celsius dimension = SmartPlaceDUD.Temperatura } datatype DadosCamera { attributes : ativo : Boolean ; qtdPessoas : Int ; } datatype DadosSensorPresenca { attributes : ativo : Boolean ; PessoasPresente : Boolean ; } datatype DadosSensorTemperatura { attributes : ativo : Boolean ; DispositivosAtivos : Boolean ; temperatura : TemperaturaCelsius ; } } package SmartPlaceCND { import SmartPlacePTD ; connector def ComandosLuzCN { participants : ~ comandosLuzPTE : ComandosLuzPTE ; ~ comandosLuzPTS : ComandosLuzPTS ; flows : ComandosLuz from comandosLuzPTE to comandosLuzPTS connector def newElement { } } connector def ComandosArCN { participants : ~ comandosArPTS : ComandosArPTS ; ~ comandosArPTE : ComandosArPTE ; flows : ComandosArCondicionado from comandosArPTE to comandosArPTS } connector def ComandosLuzCompositeCN { participants : ~ comandosLuzSEPT : ComandosLuzSEPT ; ~ comandosLuzESPT : ComandosLuzESPT ; configuration { connectors : comandosLuzCN1 : ComandosLuzCN bindings comandosLuzPTE1 = comandosLuzPTS2 ; comandosLuzCN2 : ComandosLuzCN bindings comandosLuzPTE2 = comandosLuzPTS1 ; } } connector def ComandosArCompositeCN { participants : ~ comandosArESPT : ComandosArESPT ; ~ comandosArSEPT : ComandosArSEPT ; configuration { connectors : comandosArCN1 : ComandosArCN bindings comandosArPTE1 = comandosArPTS2 ; comandosArCN2 : ComandosArCN bindings comandosArPTE2 = comandosArPTS1 ; } } connector def DadosCameraCN { participants : ~ dadosCameraMultisensorPTE : DadosCameraMultisensorPTE ; ~ dadosCameraMultisensorPTS : DadosCameraMultisensorPTS ; flows : DadosCamera from dadosCameraMultisensorPTE to dadosCameraMultisensorPTS } connector def DadosSensorDePresencaCN { participants : ~ dadosSensorDePresencaPTE : DadosSensorDePresencaPTE ; ~ dadosSensorDePresencaPTS : DadosSensorDePresencaPTS ; flows : DadosSensorPresenca from dadosSensorDePresencaPTE to dadosSensorDePresencaPTS } } package SmartPlaceCPD { import SmartPlacePTD ; import SmartPlaceVLD ; boundary
	component def SensorDePresencaCP { ports : dadosSensorDePresencaPTS : DadosSensorDePresencaPTS ; } boundary
	component def CameraMultisensorCP { ports : dadosCameraMultisensorPTS : DadosCameraMultisensorPTS ; }
	component def SistemaDeControleDeLampadasCP { ports : comandosLuzPTE : ComandosLuzPTE ; comandosLuzPTS : ComandosLuzPTS ; dadosSensorDePresencaPTE : DadosSensorDePresencaPTE ; dadosCameraMultisensorPTE : DadosCameraMultisensorPTE ; }
	component def SistemaDeControleDeArCondicionadoCP { ports : comandosArPTE : ComandosArPTE ; comandosArPTS : ComandosArPTS ; dadosSensorDePresencaPTE2 : DadosSensorDePresencaPTE ; dadosCameraMultisensorPTE2 : DadosCameraMultisensorPTE ; } boundary
	component def AplicacaoWebCP { ports : comandosArPTS : ComandosArPTS ; comandosLuzPTS : ComandosLuzPTS ; }
	component def LampadaCP { ports : comandosLuzPTE : ComandosLuzPTE ; }
	component def ArCondicionadoCP { ports : comandosArPTE : ComandosArPTE ; }
	component def SistemaSmartPlace { ports : aplicacaoWeb : ComandosArPTE ; ArCondicionado : ComandosArPTS ; aplicacaoWeb : ComandosLuzPTE ; Lampadas : ComandosLuzPTS ; dadosCameraLuzPTE : DadosCameraMultisensorPTE ; dadosSensorDePresencaLuzPTE : DadosSensorDePresencaPTE ; dadosCameraArPTE : DadosCameraMultisensorPTE ; dadosSensorDePresencaArPTE : DadosSensorDePresencaPTE ; configuration { components : SistemaDeControleDeLampadasCP : SistemaDeControleDeLampadasCP { using ports : comandosLuzPTE : ComandosLuzPTE ; comandosLuzPTS : ComandosLuzPTS ; dadosSensorDePresencaPTE : DadosSensorDePresencaPTE ; dadosCameraMultisensorPTE : DadosCameraMultisensorPTE ; }  SistemaDeControleDeArCondicionadoCP : SistemaDeControleDeArCondicionadoCP { using ports : comandosArPTE : ComandosArPTE ; comandosArPTS : ComandosArPTS ; dadosSensorDePresencaPTE2 : DadosSensorDePresencaPTE ; dadosCameraMultisensorPTE2 : DadosCameraMultisensorPTE ; } delegations :  comandosLuzPTS to Lampadas dadosCameraMultisensorPTE to dadosCameraLuzPTE dadosSensorDePresencaPTE to dadosSensorDePresencaLuzPTE    comandosLuzPTE to aplicacaoWeb comandosArPTE to aplicacaoWeb comandosArPTS to ArCondicionado dadosSensorDePresencaPTE2 to dadosSensorDePresencaArPTE dadosCameraMultisensorPTE2 to dadosCameraArPTE } } activity def ControlarEquipamentosAC (  presenca : Boolean ) ( TemperaturaDesejada : TemperaturaCelsius ) : ( ComandosLuz : ComandosLuz , ComandosArCondicionado : ComandosArCondicionado ) { body { actions : ControlarLuz : ComandarLuzAN { using pins : presencaLuz : Boolean ; } ControlarArCondicionado : ComandarArCondicionadoAN { using pins : presencaAr : Boolean ; TemperaturaDesejada : TemperaturaCelsius ; } delegate ComandosLuz to ControlarLuz delegate presenca to presencaLuz delegate ComandosArCondicionado to ControlarArCondicionado delegate TemperaturaDesejada to TemperaturaDesejada delegate presenca to presencaAr } } action def ComandarArCondicionadoAN (  presencaAr : Boolean , TemperaturaDesejada : TemperaturaCelsius ) : ComandosArCondicionado { action def ControlarArCondicionadoAN ( presencaAr : Boolean , TemperaturaDesejada : TemperaturaCelsius ) : ComandosArCondicionado { constraint : post-condition ComandarArCondicionadoEQ } constraint : post-condition ComandarArCondicionadoEQ delegate ComandarArCondicionadoAN to ComandoAr delegate presencaAr to presenca delegate TemperaturaDesejada to TemperaturaDesejada } action def ComandarLuzAN (  presencaLuz : Boolean ) : ComandosLuz { constraint : post-condition ComandarLuzEQ delegate presencaLuz to presenca delegate ComandarLuzAN to ComandoLuz }  
	constraint ComandarArCondicionadoEQ ( presenca : Boolean , TemperaturaDesejada : TemperaturaCelsius ) : ( ComandoAr : ComandosArCondicionado ) { 
			equation = (presenca == true && TemperaturaDesejada > 0) ?
			(ComandoAr == ComandoAr::ligar) :
			(ComandoAr == ComandoAr::desligar) 
	} 
	constraint ComandarLuzEQ ( presenca : Boolean ) : ( ComandoLuz : ComandosLuz ) { 
			equation = (presenca == true) ?
			(ComandoLuz == ComandoLuz::ligar) :
			(ComandoLuz == ComandoLuz::desligar)		
	} activity def MonitorarPresencaAC ( dadosSensorPresenca : DadosSensorPresenca ) : ( presenca : Boolean ) { body { actions : DetectarPresenca : DetectarPresencaAN { using pins : dadosSensorPresenca : DadosSensorPresenca ; } delegate presenca to DetectarPresenca delegate dadosSensorPresenca to dadosSensorPresenca } } action def DetectarPresencaAN ( dadosSensorPresenca : DadosSensorPresenca ) : Boolean { constraint : post-condition DetectarPresencaEQ delegate DetectarPresencaAN to presenca delegate dadosSensorPresenca to dadosSensorPresenca } 
	constraint DetectarPresencaEQ ( dadosSensorPresenca : DadosSensorPresenca ) : ( presenca : Boolean ) { 		
			equation = (dadosSensorPresenca->ativo) ?
			(presenca == true) :
			(presenca == false)	
	} activity def ChecarPessoasAC ( dadosCamera : DadosCamera ) : ( qtdPessoas : Int ) { body { actions : CalcularQuantidadePessoasEQ : CalcularQuantidadePessoasAN { using pins : dadosCamera : DadosCamera ; } delegate dadosCamera to dadosCamera delegate qtdPessoas to CalcularQuantidadePessoasEQ } } action def CalcularQuantidadePessoasAN ( dadosCamera : DadosCamera ) : Int { constraint : post-condition CalcularQuantidadePessoasEQ delegate CalcularQuantidadePessoasAN to qtdPessoas delegate dadosCamera to dadosCamera } 
	constraint CalcularQuantidadePessoasEQ ( dadosCamera : DadosCamera ) : ( qtdPessoas : Int ) { 
			equation = (dadosCamera->qdPessoas) ?
			(qtdPessoas == qdPessoas) :
			(qtdPessoas == 0)	
	} activity def MonitorarArCondicionadoAC ( dadosSensorTemperatura : DadosSensorTemperatura ) : ( ativo : Boolean ) { body { actions : DetectarArCondicionadoAN : DetectarArCondicionadoAN { using pins : dadosSensorTemperatura : DadosSensorTemperatura ; } delegate ativo to DetectarArCondicionadoAN delegate dadosSensorTemperatura to dadosSensorTemperatura } } action def DetectarArCondicionadoAN ( dadosSensorTemperatura : DadosSensorTemperatura ) : Boolean { constraint : post-condition DetectarArCondicionadoEQ delegate DetectarArCondicionadoAN to ativo delegate dadosSensorTemperatura to DadosSensorTemperatura } 
	constraint DetectarArCondicionadoEQ ( DadosSensorTemperatura : DadosSensorTemperatura ) : ( ativo : Boolean ) { 
			equation = (DadosSensorPresenca->ativo) ?
			(ativo == true) :
			(ativo == false)		
	} } package SmartPlacePTD { import SmartPlaceVLD ; port def ComandosLuzPTE { flow in ComandosLuz } port def ComandosLuzPTS { flow out ComandosLuz } port def ComandosArPTE { flow in ComandosArCondicionado } port def ComandosArPTS { flow out ComandosArCondicionado } port def ComandosLuzESPT { ports : comandosLuzPTE1 : ComandosLuzPTE ; comandosLuzPTS1 : ComandosLuzPTS ; } port def ComandosLuzSEPT { ports : comandosLuzPTS2 : ComandosLuzPTS ; comandosLuzPTE2 : ComandosLuzPTE ; } port def ComandosArESPT { ports : comandosArPTE1 : ComandosArPTE ; comandosArPTS1 : ComandosArPTS ; } port def ComandosArSEPT { ports : comandosArPTS2 : ComandosArPTS ; comandosArPTE2 : ComandosArPTE ; } port def DadosCameraMultisensorPTE { flow in DadosCamera } port def DadosSensorDePresencaPTE { flow in DadosSensorPresenca } port def DadosCameraMultisensorPTS { flow out DadosCamera } port def DadosSensorDePresencaPTS { flow out DadosSensorPresenca } }